"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const crypto_1 = require("crypto");
const rdf_dereference_store_1 = __importDefault(require("rdf-dereference-store"));
const __1 = require("..");
function main(proc) {
    return __awaiter(this, void 0, void 0, function* () {
        const args = proc.argv.slice(2);
        const signatureIndex = args.indexOf('--private-key');
        const hashIndex = args.indexOf('--hash');
        const dataIndex = args.indexOf('--data');
        const signature = signatureIndex !== -1 ? args[signatureIndex + 1] : null;
        const hash = hashIndex !== -1 ? args[hashIndex + 1] : null;
        const data = dataIndex !== -1 ? args[dataIndex + 1] : null;
        if (!signature || (!hash && !data)) {
            console.error('Missing required arguments');
            proc.exit(1);
        }
        const privateKey = yield (0, __1.importPrivateKey)(JSON.parse(fs_1.default.readFileSync(path_1.default.join(proc.cwd(), signature), 'utf-8')));
        const dataHash = hash ? Uint8Array.from(Buffer.from(hash, 'utf8')) : yield (0, __1.hashDataGraph)((yield (0, rdf_dereference_store_1.default)(path_1.default.join(proc.cwd(), data), { localFiles: true })).store);
        const sign = yield crypto_1.subtle.sign(__1.signParams, privateKey, dataHash);
        console.log(`The signature is [${Buffer.from(sign).toString('base64')}]`);
    });
}
exports.main = main;
