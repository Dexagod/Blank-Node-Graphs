"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdfDereferencer = void 0;
const path_1 = require("path");
const RdfDereferencerBase_1 = require("./RdfDereferencerBase");
const process = require("process/");
/**
 * An RdfDerefencer can dereference URLs to RDF streams, using any RDF serialization.
 */
class RdfDereferencer extends RdfDereferencerBase_1.RdfDereferencerBase {
    /**
     * Dereference the given URL to an RDF stream.
     * @param {string} url An HTTP(S) HTTPS URL, or a local file path.
     *                     Local file paths are only allowed when options.localFiles is enabled.
     * @param {IDereferenceOptions} options
     * @return {IActorRdfDereferenceOutput} The dereference output.
     */
    dereference(url, options = {}) {
        // For security reasons, only allow derefencing local files if the option is enabled.
        // This is to avoid issues with packages that use this tool via a Web API,
        // and don't want to expose access to their local files.
        if (!url.startsWith('http')) {
            if (!options.localFiles) {
                return Promise.reject(new Error('Tried to dereference a local file without enabling localFiles option: ' + url));
            }
            else if (!url.startsWith('/')) {
                url = (0, path_1.join)(process.cwd(), url);
            }
        }
        return super.dereference(url, options);
    }
}
exports.RdfDereferencer = RdfDereferencer;
//# sourceMappingURL=RdfDereferencer.js.map