import { IActorDereferenceRdfOutput } from "@comunica/bus-dereference-rdf";
import { Actor } from "@comunica/core";
import * as RDF from "@rdfjs/types";
import { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';
/**
 * An RdfDerefencer can dereference URLs to RDF streams, using any RDF serialization.
 */
export declare class RdfDereferencerBase<Q extends RDF.BaseQuad = RDF.Quad> {
    readonly mediatorDereferenceRdf: MediatorDereferenceRdf;
    constructor(args: IRdfDerefencerArgs);
    /**
     * Dereference the given URL to an RDF stream.
     * @param {string} url An HTTP(S) HTTPS URL.
     * @param {IDereferenceOptions} options
     * @return {IActorRdfDereferenceOutput} The dereference output.
     */
    dereference(url: string, options?: IDereferenceOptions): Promise<IActorDereferenceRdfOutput>;
}
export interface IDereferenceOptions {
    /**
     * Optional HTTP method to use.
     * Defaults to GET.
     */
    method?: string;
    /**
     * Optional HTTP headers to pass.
     */
    headers?: {
        [key: string]: string;
    };
    /**
     * If dereferencing of local files should be enabled.
     * This is not possible in browser environments.
     */
    localFiles?: boolean;
    /**
     * The fetch function to use.
     */
    fetch?: typeof fetch;
}
export interface IRdfDerefencerArgs {
    mediatorDereferenceRdf: MediatorDereferenceRdf;
    actors: Actor<any, any, any>[];
}
