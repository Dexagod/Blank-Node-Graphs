{"version":3,"file":"RdfDereferencer.js","sourceRoot":"","sources":["RdfDereferencer.ts"],"names":[],"mappings":";;;AACA,+BAA0B;AAE1B,+DAA+E;AAC/E,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAEpC;;GAEG;AACH,MAAa,eAAmD,SAAQ,yCAAsB;IAE5F;;;;;;OAMG;IACI,WAAW,CAAC,GAAW,EAAE,UAA+B,EAAE;QAC/D,qFAAqF;QACrF,0EAA0E;QAC1E,wDAAwD;QACxD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;gBACvB,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,wEAAwE,GAAG,GAAG,CAAC,CAAC,CAAC;aAC9F;iBAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC/B,GAAG,GAAG,IAAA,WAAI,EAAC,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC;aAChC;SACF;QAED,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;CAEF;AAzBD,0CAyBC","sourcesContent":["import {IActorDereferenceRdfOutput} from \"@comunica/bus-dereference-rdf\";\nimport {join} from \"path\";\nimport * as RDF from \"@rdfjs/types\";\nimport {IDereferenceOptions, RdfDereferencerBase} from \"./RdfDereferencerBase\";\nconst process = require(\"process/\");\n\n/**\n * An RdfDerefencer can dereference URLs to RDF streams, using any RDF serialization.\n */\nexport class RdfDereferencer<Q extends RDF.BaseQuad = RDF.Quad> extends RdfDereferencerBase<Q> {\n\n  /**\n   * Dereference the given URL to an RDF stream.\n   * @param {string} url An HTTP(S) HTTPS URL, or a local file path.\n   *                     Local file paths are only allowed when options.localFiles is enabled.\n   * @param {IDereferenceOptions} options\n   * @return {IActorRdfDereferenceOutput} The dereference output.\n   */\n  public dereference(url: string, options: IDereferenceOptions = {}): Promise<IActorDereferenceRdfOutput> {\n    // For security reasons, only allow derefencing local files if the option is enabled.\n    // This is to avoid issues with packages that use this tool via a Web API,\n    // and don't want to expose access to their local files.\n    if (!url.startsWith('http')) {\n      if (!options.localFiles) {\n        return Promise.reject(\n          new Error('Tried to dereference a local file without enabling localFiles option: ' + url));\n      } else if (!url.startsWith('/')) {\n        url = join(process.cwd(), url);\n      }\n    }\n\n    return super.dereference(url, options);\n  }\n\n}\n"]}