{"version":3,"file":"RdfDereferencerBase.js","sourceRoot":"","sources":["RdfDereferencerBase.ts"],"names":[],"mappings":";;;AACA,yCAAsD;AAGtD,+DAAqD;AAErD;;GAEG;AACH,MAAa,mBAAmB;IAI9B,YAAY,IAAwB;QAClC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;IAC5D,CAAC;IAED;;;;;OAKG;IACI,WAAW,CAAC,GAAW,EAAE,UAA+B,EAAE;QAC/D,MAAM,OAAO,GAAG,IAAI,oBAAa,CAAC,OAAO,CAAC,CAAC;QAC3C,yCAAyC;QACzC,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YACzC,OAAO,EAAE,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,0BAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO;YAC1G,OAAO,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;YACrC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,GAAG;SACJ,CAAC,CAAC;IACL,CAAC;CAEF;AAzBD,kDAyBC","sourcesContent":["import {IActorDereferenceRdfOutput} from \"@comunica/bus-dereference-rdf\";\nimport { ActionContext, Actor } from \"@comunica/core\";\nimport * as RDF from \"@rdfjs/types\";\nimport { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport { KeysHttp } from '@comunica/context-entries';\n\n/**\n * An RdfDerefencer can dereference URLs to RDF streams, using any RDF serialization.\n */\nexport class RdfDereferencerBase<Q extends RDF.BaseQuad = RDF.Quad> {\n\n  public readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n\n  constructor(args: IRdfDerefencerArgs) {\n    this.mediatorDereferenceRdf = args.mediatorDereferenceRdf;\n  }\n\n  /**\n   * Dereference the given URL to an RDF stream.\n   * @param {string} url An HTTP(S) HTTPS URL.\n   * @param {IDereferenceOptions} options\n   * @return {IActorRdfDereferenceOutput} The dereference output.\n   */\n  public dereference(url: string, options: IDereferenceOptions = {}): Promise<IActorDereferenceRdfOutput> {\n    const context = new ActionContext(options);\n    // Delegate dereferencing to the mediator\n    return this.mediatorDereferenceRdf.mediate({\n      context: typeof options.fetch === 'function' ? context.setDefault(KeysHttp.fetch, options.fetch) : context,\n      headers: new Headers(options.headers),\n      method: options.method,\n      url,\n    });\n  }\n\n}\n\nexport interface IDereferenceOptions {\n  /**\n   * Optional HTTP method to use.\n   * Defaults to GET.\n   */\n  method?: string;\n  /**\n   * Optional HTTP headers to pass.\n   */\n  headers?: {[key: string]: string};\n  /**\n   * If dereferencing of local files should be enabled.\n   * This is not possible in browser environments.\n   */\n  localFiles?: boolean;\n  /**\n   * The fetch function to use.\n   */\n  fetch?: typeof fetch;\n}\n\nexport interface IRdfDerefencerArgs {\n  mediatorDereferenceRdf: MediatorDereferenceRdf;\n  actors: Actor<any, any, any>[];\n}\n"]}