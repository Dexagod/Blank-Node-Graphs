{"version":3,"file":"ActorDereferenceBase.js","sourceRoot":"","sources":["ActorDereferenceBase.ts"],"names":[],"mappings":";;;AAAA,+DAA0D;AAE1D,yCAAuC;AAEvC,qDAA2C;AAG3C,SAAgB,aAAa;IAC3B,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;IAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChB,OAAW,IAAI,CAAC;AAClB,CAAC;AAJD,sCAIC;AAED;;;;GAIG;AACH,SAAgB,WAAW,CAAC,OAAuB;IACjD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,OAAO,CAAC,CAAC;AAC7C,CAAC;AAFD,kCAEC;AAED;;;;;;;;;;GAUG;AACH,MAAsB,oBACpB,SAAQ,YAAc;IACtB,YAAmB,IAAyB;QAC1C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACO,KAAK,CAAC,uBAAuB,CACrC,MAAS,EACT,KAAc,EACd,MAAS;QAET,IAAI,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YAC/B,MAAM,KAAK,CAAC;SACb;QACD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAW,KAAM,CAAC,OAAO,CAAC,CAAC;QACvD,OAAO,EAAE,GAAG,MAAM,EAAE,IAAI,EAAE,aAAa,EAAK,EAAE,CAAC;IACjD,CAAC;CACF;AAxBD,oDAwBC","sourcesContent":["import { KeysInitQuery } from '@comunica/context-entries';\nimport type { IAction, IActorArgs, IActorTest } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport { Readable } from 'readable-stream';\nimport type { IActorDereferenceOutput } from '.';\n\nexport function emptyReadable<S extends Readable>(): S {\n  const data = new Readable();\n  data.push(null);\n  return <S> data;\n}\n\n/**\n * Check if hard errors should occur on HTTP or parse errors.\n * @param {IActionDereference} action A dereference action.\n * @return {boolean} If hard errors are enabled.\n */\nexport function isHardError(context: IActionContext): boolean {\n  return !context.get(KeysInitQuery.lenient);\n}\n\n/**\n * A base actor for dereferencing URLs to (generic) streams.\n *\n * Actor types:\n * * Input:  IActionDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorDereferenceOutput: A Readable stream\n *\n * @see IActionDereference\n * @see IActorDereferenceOutput\n */\nexport abstract class ActorDereferenceBase<I extends IAction, T extends IActorTest, O extends IActorDereferenceOutput>\n  extends Actor<I, T, O> {\n  public constructor(args: IActorArgs<I, T, O>) {\n    super(args);\n  }\n\n  /**\n   * Handle the given error as a rejection or delegate it to the logger,\n   * depending on whether or not hard errors are enabled.\n   * @param {I} action An action.\n   * @param {Error} error An error that has occurred.\n   * @param {N} output Data to add to the output\n   */\n  protected async dereferenceErrorHandler<N, M extends Readable>(\n    action: I,\n    error: unknown,\n    output: N,\n  ): Promise<N & { data: M }> {\n    if (isHardError(action.context)) {\n      throw error;\n    }\n    this.logError(action.context, (<Error> error).message);\n    return { ...output, data: emptyReadable<M>() };\n  }\n}\n"]}